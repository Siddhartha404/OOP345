In this workshop, I utilized several STL algorithms to enhance the Bakery module, focusing on avoiding manual loops for better efficiency and readability. I used std::for_each in the showGoods function to iterate over the collection and print each BakedGood, chosen for its ability to apply a function to each element without explicit loops. To calculate the total stock and price, I employed std::accumulate, which efficiently reduces a range to a single value using a specified operation. For sorting tasks, std::sort was the clear choice due to its efficiency and support for custom comparisons, used in both sortBakery and combine functions. The inStock function leveraged std::find_if to check for the presence of specific items, allowing for concise and expressive code. Finally, std::copy_if was used in outOfStock to filter out-of-stock items, providing a straightforward way to create a new collection based on a condition. The advantage of using STL algorithms lies in their optimized performance and the clarity they bring to the code, as opposed to manually implemented loops. If the collection type were a list instead of a vector, the main difference would be in the sorting operation, as std::list has a built-in sort method optimized for linked lists.
