//Name: Siddhartha Thapa Chhetri
//Email: sthapa-chhetri2@myseneca.ca
//ID: 147913222
//I declare that this submission is the result of my own work and I only copied the code that my professor provided to complete my workshops and assignments. This submitted piece of work has not been shared with any other student or 3rd party content provider.

Completing this workshop has reinforced my understanding of several fundamental programming concepts. The distinction between functors and lambda expressions became clear: functors are beneficial for maintaining stateful behavior across multiple calls and are suitable for complex operations where object-oriented features like inheritance are advantageous. In contrast, lambda expressions offer succinct, inline definitions ideal for short, localized tasks and scenarios where capturing variables from the enclosing scope is beneficial. The SpellChecker module highlighted exception handling strategies: while the current implementation uses exceptions to handle file name errors, an alternative approach using error codes or boolean flags could provide similar functionality with more explicit error management at both the constructor and client side. Redesigning Movie and Book classes to avoid duplicating file-loading logic through a common base class (MediaItem) demonstrated the benefits of abstraction and code reuse. Finally, considering the necessity of default constructors in Movie and Book, their removal could enforce more explicit object initialization practices, especially when objects are primarily instantiated through custom constructors or loaded from external sources. Overall, this workshop enriched my knowledge in object-oriented design, exception handling strategies, and effective code reuse techniques in C++.
