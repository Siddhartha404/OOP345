//Name: Siddhartha Thapa Chhetri
//Email: sthapa-chhetri2@myseneca.ca
//ID: 147913222
//I declare that this submission is the result of my own work and I only copied the code that my professor provided to complete my workshops and assignments.This submitted piece of work has not been shared with any other student or 3rd party content provider.
This workshop provided a comprehensive exploration of essential C++ concepts, focusing on polymorphism, memory management with pointers, and effective use of standard library containers. Managing dynamically allocated memory in the context of a simulated filesystem was critical, necessitating careful deallocation of resources stored as pointers in vectors. For instance, in the Directory class, each resource (Resource*) stored in m_contents had to be explicitly deleted in the destructor to prevent memory leaks. Special C++ operations like downcasting (static_cast) were crucial for invoking specific functions from derived classes (e.g., Directory) via base class pointers (Resource*). This enabled tasks such as updating parent paths recursively across directory structures.

Using std::vector<seneca::Resource*> over std::vector<seneca::Resource> was essential for facilitating polymorphic behavior and avoiding object slicing. Pointers allowed for dynamic dispatch through virtual functions, ensuring that operations could be performed uniformly on different types of resources (File, Directory) while preserving their specific behaviors and data. Challenges included implementing recursive algorithms for operations like resource finding within directories and robust error handling to manage resource duplication and directory operations effectively. Overall, this workshop strengthened my understanding of advanced C++ concepts applicable to building scalable and efficient software systems handling hierarchical data structures like filesystems.
